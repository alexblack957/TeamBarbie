# -*- coding: utf-8 -*-
"""“Visualisation 4 parameters 2021-23.ipynb”的副本

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1awRISz7I71zw4EXD6BbSAhdNXv5aJlhE
"""

import pandas as pd
import matplotlib.pyplot as plt

# Loading CSV file

file_path = '/content/for the visulisation.csv'
df = pd.read_csv(file_path)

# Convert TIME column to datetime format
df['TIME'] = pd.to_datetime(df['TIME'])

# Defining the time range
start_date = pd.to_datetime('2019-09-04T02:00:04Z')
end_date = pd.to_datetime('2021-09-04T22:00:00Z')

# Calculate the number of 4-month periods
num_periods = (end_date.year - start_date.year) * 3 + (end_date.month - start_date.month) // 4

# Create line plots for TEMP, PSAL, DOX1, and fCO2SW_UATM with different colors
params = ['TEMP', 'PSAL', 'DOX1', 'fCO2SW_UATM']
colors = ['blue', 'green', 'red', 'purple']
descriptions = {
    'TEMP': 'Temperature (°C)',
    'PSAL': 'Practical Salinity',
    'DOX1': 'Dissolved Oxygen (µmol/L)',
    'fCO2SW_UATM': 'fCO2SW_UATM'
}

for param, color in zip(params, colors):
    plt.figure(figsize=(12, 6))
    avg_values = []
    period_labels = []

    for i in range(num_periods):
        # Calculate the start and end dates for each 4-month period
        period_start = start_date + pd.DateOffset(months=4 * i)
        period_end = period_start + pd.DateOffset(months=4)

        # Filter data for the current 4-month period
        period_data = df[(df['TIME'] >= period_start) & (df['TIME'] < period_end)]

        # Calculate the average for the current period
        average_value = period_data[param].mean()

        # Append the average value and period label
        avg_values.append(average_value)
        period_labels.append(f'{period_start.strftime("%Y/%m")} - {period_end.strftime("%Y/%m")}')

    # Create a line plot for the current parameter
    plt.plot(period_labels, avg_values, label=f'Average {descriptions[param]}', color=color, marker='o')

    plt.title(f'Average {descriptions[param]} Over 4-Month Periods')
    plt.xlabel('Time Period')
    plt.ylabel(f'Average {descriptions[param]}')
    plt.legend()
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()

    # Annotate each data point with its value
    for x, y in zip(period_labels, avg_values):
        plt.annotate(f'{y:.2f}', (x, y), textcoords='offset points', xytext=(0, 10), ha='center')

# Show the plot for each parameter
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Loading the CSV
file_path = '/content/for the visulisation.csv'
df = pd.read_csv(file_path)

# Convert TIME column to datetime format
df['TIME'] = pd.to_datetime(df['TIME'])

# Defining the time range
start_date = pd.to_datetime('2019-09-04T02:00:04Z')
end_date = pd.to_datetime('2023-10-05T08:00:00Z')

# Define the specific time range for visualization
visualize_start_date = pd.to_datetime('2021-10-05T00:00:00Z')
visualize_end_date = pd.to_datetime('2023-10-05T08:00:00Z')

# Calculate the number of 4-month periods within the visualization time range
num_periods = (visualize_end_date.year - visualize_start_date.year) * 3 + (visualize_end_date.month - visualize_start_date.month) // 4

# Create line plots for TEMP, PSAL, DOX1, and fCO2SW_UATM with different colors
params = ['TEMP', 'PSAL', 'DOX1', 'fCO2SW_UATM']
colors = ['blue', 'green', 'red', 'purple']
descriptions = {
    'TEMP': 'Temperature (°C)',
    'PSAL': 'Practical Salinity',
    'DOX1': 'Dissolved Oxygen (µmol/L)',
    'fCO2SW_UATM': 'Fugacity of carbon dioxide (at 100% humidity) in the water body'
}

for param, color in zip(params, colors):
    plt.figure(figsize=(12, 6))
    avg_values = []
    period_labels = []

    for i in range(num_periods):
        # Calculate the start and end dates for each 4-month period within the visualization range
        period_start = visualize_start_date + pd.DateOffset(months=4 * i)
        period_end = period_start + pd.DateOffset(months=4)

        # Filter data for the current 4-month period
        period_data = df[(df['TIME'] >= period_start) & (df['TIME'] < period_end)]

        # Calculate the average for the current period
        average_value = period_data[param].mean()

        # Append the average value and period label
        avg_values.append(average_value)
        period_labels.append(f'{period_start.strftime("%Y/%m")} - {period_end.strftime("%Y/%m")}')

    # Create a line plot for the current parameter
    plt.plot(period_labels, avg_values, label=f'Average {descriptions[param]}', color=color, marker='o')

    plt.title(f'Average {descriptions[param]} Over 4-Month Periods (2021-10-05 to 2023-10-05)')
    plt.xlabel('Time Period')
    plt.ylabel(f'Average {descriptions[param]}')
    plt.legend()
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()

    # Annotate each data point with its value
    for x, y in zip(period_labels, avg_values):
        plt.annotate(f'{y:.2f}', (x, y), textcoords='offset points', xytext=(0, 10), ha='center')

# Show the plot for each parameter
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load your CSV file
# Replace 'your_file.csv' with the actual file path
file_path = '/content/for the visulisation.csv'
df = pd.read_csv(file_path)

# Convert TIME column to datetime format
df['TIME'] = pd.to_datetime(df['TIME'])

# Define the time range
start_date = pd.to_datetime('2022-10-05T00:00:00Z')
end_date = pd.to_datetime('2023-10-05T08:00:00Z')

# Filter data for the specified time range
filtered_df = df[(df['TIME'] >= start_date) & (df['TIME'] <= end_date)]

# Calculate the average values for each parameter
average_temp = filtered_df['TEMP'].mean()
average_psal = filtered_df['PSAL'].mean()
average_dox1 = filtered_df['DOX1'].mean()
average_fco2sw_uatm = filtered_df['fCO2SW_UATM'].mean()

# Create a bar plot to visualize the average values of the parameters
params = ['TEMP', 'PSAL', 'DOX1', 'fCO2SW_UATM']
average_values = [average_temp, average_psal, average_dox1, average_fco2sw_uatm]
descriptions = {
    'TEMP': 'Temperature (°C)',
    'PSAL': 'Practical Salinity',
    'DOX1': 'Dissolved Oxygen (µmol/L)',
    'fCO2SW_UATM': 'fCO2SW_UATM'
}

plt.figure(figsize=(12, 6))
plt.bar(params, average_values, color=['blue', 'green', 'red', 'purple'])
plt.title('Average Values of Parameters (2022-10-05 to 2023-10-05)')
plt.xlabel('Parameters')
plt.ylabel('Average Values')
plt.xticks(rotation=45)

# Annotate each bar with its value
for param, value in zip(params, average_values):
    plt.annotate(f'{value:.2f}', (param, value), textcoords='offset points', xytext=(0, 10), ha='center')

# Show the bar plot
plt.show()